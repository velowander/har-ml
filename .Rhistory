y=c(1:10)
x=y-1+rnorm(10)/10
z=c(1:10)
z=z*2
summary(lm(y~x+offset(z)))
z=z*4
summary(lm(y~x+offset(z)))
z = 1:10
summary(lm(y~x+offset(z)))
z <- jitter(z)
y <- jitter(y)
summary(lm(y~x+offset(z)))
summary(lm(y~x+offset(z + log(10))))
summary(lm(y~x+offset(z + log(100))))
summary(lm(y~x))
summary(lm(y~x + offset(z)))
summary(lm(y~x + offset(z * 10)))
zz <- log(10 + z)
summary(lm(y ~ x + offset(z)))
summary(lm(y ~ x + offset(zz)))
swirl()
library(swirl)
swirl()
var(rpois(1000, 50))
nxt()
head(hits)
class(hits[, 'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
mdl$fitted.values[704] -> lambda
qpois(0.95, lambda)
mdl2 <- glm(simplystats ~ date, poisson, offset=log(visits+1), data=hits)
qpois(0.95, mdl2$fitted.values[704])
ravenData
mdl <- (ravenWinNum ~ ravenScore, family=binomial, ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family=binomial, ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
data(cars)
glm(mpg ~ wt)
data(mtcars)
rm(cars)
View(mtcars)
a <- glm(mpg ~ wt, family = poisson, mtcars)
a <- glm(mpg ~ wt, family = poisson, data = mtcars)
warnings()
rm(mtcars)
rm(question01, question02, question03)
data(mtcars)
fit <- lm(mpg ~ am, wt, mtcars)
view(mtcars)
View(mtcars)
fit <- lm(mpg ~ am + wt + cyl)
fit <- lm(mpg ~ am + wt + cyl, mtcars)
setwd("~/R")
hatvalues(fit)
summary(hatvalues(fit))
View(mtcars)
View(mtcars)
pairs(mpg ~ ., mtcars)
example(pairs)
pairs(mtcars)
View(mtcars)
View(mtcars)
fit <- lm(mpg ~ ., mtcars)
summary(fit)
summary(fit$coef)
fit$coef
help(mtcars)
fit <- lm(mpg ~ ., mtcars)
fit
summary(fit)
outlierTest(fit)
setwd("~/R/har-ml")
fileName = c("pml-training", "pml-testing")
fileUrl = c("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
train.raw <- read.csv(fileName[1])[ , -c(1:7)]
train.sample <- train.raw[sample(nrow(train.raw), 5000), ]
classeColumn <- train.sample$classe
head(classeColumn)
train.sample <- data.frame( sapply(train.sample [ , -153], as.numeric) )
str(train.sample)
train.sample <- cbind(classeColumn, train.sample)
rm(classeColumn)
class(train.sample$classe)
inTrain = createDataPartition(train.sample$classe, p = 0.7)[[1]]
library(caret)
names(train.sample)
fileName = c("pml-training", "pml-testing")
fileUrl = c("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
train.raw <- read.csv(fileName[1])[ , -c(1:7)]
train.sample <- train.raw[sample(nrow(train.raw), 5000), ]
classeColumn <- train.sample$classe
train.sample <- data.frame( sapply(train.sample [ , -153], as.numeric) )
train.sample <- cbind(classe = classeColumn, train.sample)
head(names(train.sample))
rm(classeColumn)
inTrain = createDataPartition(train.sample$classe, p = 0.7)[[1]]
training = train.sample[ inTrain, ]
validationSet = train.sample [ -inTrain, ]
set.seed(32343)
fileName = c("pml-training", "pml-testing")
fileUrl = c("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
train.raw <- read.csv(fileName[1])[ , -c(1:7)]
set.seed(32343)
train.sample <- train.raw[sample(nrow(train.raw), 5000), ]
classeColumn <- train.sample$classe
train.sample <- data.frame( sapply(train.sample [ , -153], as.numeric) )
train.sample <- cbind(classe = classeColumn, train.sample)
View(train.sample)
rm(classeColumn)
inTrain = createDataPartition(train.sample$classe, p = 0.7)[[1]]
training = train.sample[ inTrain, ]
validationSet = train.sample [ -inTrain, ]
preProc <- preProcess(training[ , -1], method="pca", thresh = 0.9)
inTrain = createDataPartition(train.sample$classe, p = 0.7, list = FALSE)
training = train.sample[ inTrain, ]
validationSet = train.sample [ -inTrain, ]
test <- read.csv(fileName[2])
preProc <- preProcess(training[ , -1], method="pca", thresh = 0.9)
train.sample[, apply(train.sample, 2, var, na.rm=TRUE) != 0]
apply(train.sample, 2, var, na.rm=TRUE) != 0
sapply(train.sample, 2, var, na.rm=TRUE) != 0
apply(train.sample, 2, var, na.rm=TRUE) != 0
apply(train.sample, 2, var, na.rm=TRUE) != 0 -> a
class(a)
rm(a)
preProc <- preProcess(training[ , -1], method="pca", thresh = 0.9)
prcomp(training [, -1])
training [, -1]
modFit.cv = train(as.factor(classe) ~ . , data = training,
method = 'rf', trControl = trainControl(method='cv'))
modFit.cv = train(as.factor(classe) ~ . , data = training,
method = 'rf', trControl = trainControl(method='cv'))
modFit = train(as.factor(classe) ~ . , data = training, method = 'rf')
predict.cv <- predict(modFit.cv, validationSet[ , -1])
length(predict.cv)
validationSet[ , -1]
length(validationSet[ , -1])
str(validationSet)
str(validationSet[ , -1])
predict1 <- predict(modFit, validationSet[ , -1])
length(predict1)
train.raw <- read.csv(fileName[1])[ , -c(1:7)]
set.seed(32343)
train.sample <- train.raw[sample(nrow(train.raw), 5000), ]
classeColumn <- train.sample$classe
train.sample <- train.raw[sample(nrow(train.raw), 5000), ]
classeColumn <- train.sample$classe
train.sample <- train.sample[ sapply(train.sample [ , -153], is.factor)  ]
train.sample <- train.raw[sample(nrow(train.raw), 5000), ]
train.sample[ ,sapply(train.sample [ , -153], is.factor)  ]
sapply(train.sample [ , -153], is.factor)
train.sample <- train.sample[ sapply(train.sample [ , -153], !is.factor)  ]
train.sample <- train.sample[ , sapply(train.sample [ , -153], !is.factor)  ]
apply(train.sample[ , -153], 2, !is.factor)
apply(train.sample[ , -153], 2, is.factor)
train.sample <- train.sample[ , -apply(train.sample[ , -153], 2, is.factor) ]
apply(train.sample[ , -153], 2, is.factor)
train.sample <- train.raw[sample(nrow(train.raw), 5000), ]
set.seed(32343)
train.sample <- train.raw[sample(nrow(train.raw), 5000), ]
classeColumn <- train.sample$classe
apply(train.sample[ , -153], 2, is.factor)
apply(train.sample[ , -153], 2, is.factor) == FALSE
train.sample <- train.sample[ , apply(train.sample[ , -153], 2, is.factor) == FALSE ]
is.numeric(5)
!is.numeric(5)
apply(train.sample[ , -153], 2, is.numeric)
train.sample <- train.sample[ , apply(train.sample[ , -153], 2, is.numeric)]
apply(train.sample[ , -153], 2, is.numeric) -> a
class(a)
a[5]
a[100]
a[[1]]
a[[3]]
train.sample <- train.raw[sample(nrow(train.raw), 5000), ]
train.sample <- train.sample[apply(train.sample[ , -153], 2, is.numeric, na.rm = TRUE)]
train.sample[ , apply( , train.sample, 2, var, na.rm=TRUE) != 0]
train.sample[ , apply(train.sample, 2, var, na.rm=TRUE) != 0]
rep(c(TRUE, FALSE), 5)
rep(c(TRUE, FALSE), 5) -> a
a [2]
a[1]
a[3]
train.sample[ , rep(c(TRUE, FALSE), 77)]
bun <- train.sample[ , rep(c(TRUE, FALSE), 77)]
bun <- train.sample[ , apply(train.sample[ , -153], 2, is.numeric, na.rm = TRUE)]
apply(train.sample[ , -153], 2, is.numeric, na.rm = TRUE)
apply(train.sample, 2, var, na.rm=TRUE) != 0
apply(train.sample[ , -153], 2, is.numeric, na.rm = TRUE)
apply(train.sample[ , -153], 2, is.numeric)
bun <- train.sample[ , apply(train.sample[ , -153], 2, is.numeric)]
bun <- apply(train.sample[ , -153], 2, is.numeric)
bun
as.logical(bun)
train.sample <- train.sample[ , as.logical( apply(train.sample[ , -153], 2, is.numeric) )]
as.logical( apply(train.sample[ , -153], 2, is.numeric) )
apply(train.sample[ , -153], 2, is.numeric) -> bun
apply(train.sample[ , -153], 2, is.factor)
set.seed(32343)
train.sample <- train.raw[sample(nrow(train.raw), 5000), ]
apply(train.sample[ , -153], 2, is.factor)
train.sample2 <- train.sample[ , as.logical( apply(train.sample[ , -153], 2, is.numeric) )]
as.logical( apply(train.sample[ , -153], 2, is.numeric) )
apply(train.sample[ , -153], 2, is.numeric)
str(train.sample)
as.logical( apply(train.sample[ , -153], 2, is.factor)
)
apply(train.sample[ , -153], 2, is.factor)
bun <- subset(train.sample, select = is.factor)
set.seed(32343)
train.sample <- train.raw[sample(nrow(train.raw), 5000), ]
train.sample2 <- train.sample[ , apply(train.sample[ , -153], 2, is.factor) ]
bun <- apply(train.sample[ , -153], 2, is.factor)
bun
as.logical(bun)
fileName = c("pml-training", "pml-testing")
fileUrl = c("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
train.raw <- read.csv(fileName[1])[ , -c(1:7)]
set.seed(32343)
train.sample.allCol <- train.raw[sample(nrow(train.raw), 5000), ]
train.sample <- train.sample.allCol[ , apply(train.sample.allCol[ , -153], 2, is.factor) ]
apply(train.sample.allCol[ , -153], 2, is.factor)
train.sample <- train.sample.allCol[ , as.logical( apply(train.sample.allCol[ , -153], 2, is.factor) )]
as.logical( apply(train.sample.allCol[ , -153], 2, is.factor) )
columnIndex <- apply(train.sample.allCol[ , -153], 2, is.factor)
columnIndex <- logical( apply(train.sample.allCol[ , -153], 2, is.factor) )
train.sample <- train.sample.allCol[ , columnIndex]
View columnIndex
View(columnIndex)
columnIndex <- apply(train.sample.allCol[ , -153], 2, is.factor)[2]
columnIndex <- apply(train.sample.allCol[ , -153], 2, is.factor)[, 2]
columnIndex <- apply(train.sample.allCol[ , -153], 2, is.factor)
dim(columnIndex)
str(columnIndex)
columnIndex$logi
columnIndex$logical
columnIndex$names
columnIndex$x
columnIndex[1]
typeof(train.raw)
class(train.raw)
apply(train.sample.allCol[ , -153], 2, is.factor
)
is.factor(train.sample.allCol$kurtosis_roll_belt)
lapply(train.sample[ , -153], is.factor)
lapply(train.sample[1 , -153], is.factor)
vapply(train.sample, is.factor)
apply(train.sample.allCol[ , -153], 2, max)
train.sample.allCol["pitch_belt"]
a <- pitch_belt
a <- "pitch_belt"
train.sample.allCol[a]
is.numeric(train.sample.allCol[a])
is.factor(train.sample.allCol[a])
class(train.sample.allCol[a])
class(train.sample.allCol[,a])
is.numeric(train.sample.allCol[,a])
sapply(train.sample [ , -153], as.numeric)
sapply(train.sample [ , -153], as.numeric, simplify = "array") -> bun
dropFactorColumn <- function(df) {
#df - name of data frame to inspect
for (i in 1:ncol(df)) {
if (is.factor(df[, i])) df[, -i]
}
df
}
rm(train.sample.allCol)
rm(train.sample)
set.seed(32343)
train.sample <- train.raw[sample(nrow(train.raw), 5000), ]
classeColumn <- train.sample$classe
train.sample2 <- dropFactorColumn(train.sample)
is.factor(train.sample[1])
is.factor(train.sample[2])
is.factor(train.sample[100])
is.factor(train.sample[150])
is.factor(train.sample[, 1])
is.factor(train.sample[, 150])
is.factor(train.sample[, 140])
is.factor(train.sample[, 120])
train.sample[, -120]
dropFactorColumn <- function(df) {
#df - name of data frame to inspect
for (i in 1:ncol(df)) if (is.factor(df[, i])) df[, i] <- NULL
df
}
train.sample2 <- dropFactorColumn(train.sample)
listFactorColumn <- function(df) {
for (i in 1:ncol(df)) if (is.factor(df[, i])) show(i)
}
is.factor(train.sample)
is.factor(names(train.sample)
)
listFactorColumn(train.sample)
listFactorColumn(train.sample) -> a
class(a)
out <- logical(0)
listFactorColumn <- function(df) {
out <- logical(0)
for (i in 1:ncol(df)) if (is.factor(df[, i])) {
out[length(out) + 1] = i
}
out
}
listFactorColumn(train.sample)
train.sample[5]
head(train.sample[, 5])
train.sample2 <- train.sample[, -listFactorColumn(train.sample)]
train.sample <- train.sample[, -listFactorColumn(train.sample)]
rm(train.sample2)
View(train.sample)
train.raw <- read.csv(fileName[1])[ , -c(1:7)]
set.seed(32343)
train.sample <- train.raw[sample(nrow(train.raw), 5000), ]
classeColumn <- train.sample$classe
View(train.sample)
train.sample <- train.sample[, -listFactorColumn(train.sample)]
train.sample <- cbind(classe = classeColumn, train.sample)
rm(classeColumn)
inTrain = createDataPartition(train.sample$classe, p = 0.7, list = FALSE)
training = train.sample[ inTrain, ]
validationSet = train.sample [ -inTrain, ]
modFit = train(as.factor(classe) ~ . , data = training, method = 'rf')
modFit.cv = train(as.factor(classe) ~ . , data = training,
method = 'rf', trControl = trainControl(method='cv'))
preProc <- preProcess(training[ , -1], method="pca", thresh = 0.9)
trainPC <- predict(preProc, training[, -1])
testPC <- predict(preProc,testing[, -1])
modFit.pca2 <- train(as.factor(classe) ~ ., data=trainPC, method = "rf",
trControl = trainControl(method='cv'))
preProc <- preProcess(training, method="pca", thresh = 0.9)
preProc <- preProcess(training[, -1], method="pca", thresh = 0.9)
trainPC <- predict(preProc, training)
#testPC <- predict(preProc,testing[, -1])
modFit.pca2 <- train(as.factor(classe) ~ ., data=trainPC, method = "rf",
trControl = trainControl(method='cv'))
View(validationSet)
predict.cv <- predict(modFit.cv, validationSet[ , -1])
length(predict.cv)
predict.cv
View(validationSet)
summarize(validationSet)
summary(validationSet)
str(summary(validationSet))
listFactorColumn(train.sample)
listFactorColumn(train.raw)
listColumnNA <- function(df) {
out <- integer(0)
for (i in 1:ncol(df)) out[length(out) + 1] = sum(is.na(df[, i]))/nrow(df)
}
listColumnNA (validationSet)
listColumnNA <- function(df) {
out <- integer(0)
for (i in 1:ncol(df)) out[length(out) + 1] = sum(is.na(df[, i]))/nrow(df)
out
}
listColumnNA <- function(df) {
listColumnNA(train.sample)
train.sample <- train.sample[, -listUnacceptableColumnNA(train.sample)]
listUnacceptableColumnNA <- function(df) {
thresh <- 0.9
out <- logical(0)
for (i in 1:ncol(df)) out[length(out) + 1] = (sum(is.na(df[, i]))/nrow(df) > thresh)
out
}
train.sample <- train.sample[, -listUnacceptableColumnNA(train.sample)]
listUnacceptableColumnNA(train.raw)
listUnacceptableColumnNA(train.sample)
train.sample <- train.sample[, -listUnacceptableColumnNA(train.sample)]
listUnacceptableColumnNA <- function(df) {
thresh <- 0.9
out <- logical(0)
for (i in 1:ncol(df)) {
if (sum(is.na(df[, i]))/nrow(df) > thresh) out[length(out) + 1] = i
}
out
}
train.raw <- read.csv(fileName[1])[ , -c(1:7)]
set.seed(32343)
train.sample <- train.raw[sample(nrow(train.raw), 5000), ]
classeColumn <- train.sample$classe
train.sample <- train.sample[, -listFactorColumn(train.sample)]
train.sample <- train.sample[, -listUnacceptableColumnNA(train.sample)]
#train.sample <- data.frame( sapply(train.sample [ , -153], as.numeric) )
#train.sample[ , apply(train.sample[, -153], 2, var, na.rm=TRUE) != 0]
train.sample <- cbind(classe = classeColumn, train.sample)
rm(classeColumn)
rm(trainPC)
rm(a, bun)
rm(columnIndex)
listUnacceptableColumnNA(train.sample)
train.sample <- cbind(classe = classeColumn, train.sample)
rm(classeColumn)
#inTrain = createDataPartition(train.sample$classe, p = 0.7)[[1]]
inTrain = createDataPartition(train.sample$classe, p = 0.7, list = FALSE)
training = train.sample[ inTrain, ]
validationSet = train.sample [ -inTrain, ]
test <- read.csv(fileName[2])
modFit = train(as.factor(classe) ~ . , data = training, method = 'rf')
